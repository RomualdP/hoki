---
description: Standard workflow for creating Pull Requests: verify staging branch, create issue-based branch, develop, validate, and create PR
globs: 
alwaysApply: true
---

Title: Pull Request Workflow Standard

Scope: Applies when user requests to create a Pull Request (PR) or work on an issue.

Objectives:
- Ensure all PRs start from the `staging` branch
- Create feature branches named after the issue
- Enforce quality gates before PR creation
- Automate PR creation with proper formatting

Workflow Steps:

1) Verify Current Branch
- Check current branch: `git branch --show-current`
- If not on `staging`, switch to staging: `git checkout staging`
- Pull latest changes: `git pull origin staging`
- If user is already on a feature branch, ask for confirmation before switching

2) Create Feature Branch
- Extract issue identifier from user request or issue title
- Format branch name: `issue/{issue-id}` or `feature/{issue-title-kebab-case}`
- Examples:
  - Issue BACK-001 → `issue/BACK-001`
  - Issue "Add user profile" → `feature/add-user-profile`
- Create and checkout: `git checkout -b {branch-name}`

3) Develop Feature
- Follow existing development workflow (plan → todos → execute → validate)
- Apply all relevant rules (clean code, testing, zero warnings)
- Keep commits atomic and focused

4) Quality Gates Validation
- Frontend:
  - `yarn --cwd volley-app-frontend lint --max-warnings 0`
  - `yarn --cwd volley-app-frontend build`
  - `yarn --cwd volley-app-frontend tsc --noEmit` (if needed)
- Backend:
  - `yarn --cwd volley-app-backend lint --max-warnings 0`
  - `yarn --cwd volley-app-backend test` (or `test:cov` for coverage)
  - `yarn --cwd volley-app-backend tsc --noEmit` (if needed)
- If any validation fails, fix issues before proceeding
- Never commit with warnings or errors

5) Commit Changes
- Stage all changes: `git add .`
- Create commit with concise English message
- Format: `{type}: {brief description}`
  - Examples:
    - `feat: add user profile component`
    - `fix: resolve authentication token refresh`
    - `refactor: extract match statistics service`
- Commit: `git commit -m "{commit-message}"`

6) Push Branch
- Push to remote: `git push -u origin {branch-name}`
- If push fails, verify remote access and branch name

7) Update Branch Before PR
- Ensure branch is up to date with remote: `git pull origin {branch-name}`
- This ensures the branch has any remote changes before creating the PR
- If conflicts occur, resolve them before proceeding

8) Create Pull Request
- Generate PR body using existing script: `.cursor/COMMANDS/generate-pr-body.sh {repo-path}`
- Or use template: `.cursor/template/pull_request_template.md`
- PR title should match commit message or be more descriptive
- PR body should include:
  - Reference to issue (if applicable): `Closes #issue-number` or `Related to #issue-number`
  - Brief description of changes
  - Testing notes (if applicable)
  - Any breaking changes or migration steps
  - Link to quality gates status (lint, tests, build)
- Use GitHub CLI if available: `gh pr create --base staging --title "{PR-title}" --body "{PR-body}"`
- Or provide instructions for manual PR creation with GitHub URLs

Quality Gates Checklist (before PR):
- ✅ All lint checks pass with zero warnings
- ✅ All tests pass (backend)
- ✅ Build succeeds (frontend)
- ✅ TypeScript compilation succeeds
- ✅ No console.log statements
- ✅ No eslint-disable or @ts-ignore comments
- ✅ Commit message follows convention
- ✅ Branch name follows naming convention

Error Handling:
- If branch verification fails: inform user and ask for manual resolution
- If quality gates fail: stop process, show errors, fix issues before retrying
- If push fails: check remote access, branch name, and network connectivity
- If pull fails due to conflicts: stop process, inform user, resolve conflicts manually, then retry
- If PR creation fails: provide manual instructions and GitHub URLs

Notes:
- Always start from `staging` branch unless explicitly told otherwise
- Never skip quality gates
- Never commit without validation
- Always create descriptive branch names based on issue
- Always pull latest changes on the feature branch before creating PR to ensure it's up to date with remote
