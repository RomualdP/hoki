---
alwaysApply: true
---
Title: AI Workflow Standard (Cursor 2025)

Scope: Applies to all AI-driven coding sessions in this repository (backend NestJS, frontend Next.js).

Objectives:
- Enforce a predictable, high-signal AI workflow: plan → todos → execute in batches → validate → summarize → propose commit.
- Guarantee strict quality gates: zero warnings, strict typing, fast feedback, and traceability.

Workflow:
1) Plan First
- Produce a concise plan (in French), specific and actionable, scoped to exact files and minimal edits.
- Ask at most 1–2 critical questions when scope is ambiguous; otherwise proceed with sensible defaults.

2) Todos Management
- Create atomic todos (≤14 words) for non-trivial tasks; one responsibility per file.
- Keep one todo in_progress at a time; update statuses immediately after each step.

3) Parallel Execution
- Batch independent reads/searches and validations in parallel.
- Sequence dependent changes only when necessary.

4) Edit Discipline
- No comments added solely to explain actions; code comments only for non-obvious intent.
- Respect limits: functions ≤30 lines, ≤5 params; files ≤300 lines; one responsibility per file.
- Use descriptive names (no abbreviations, no single letters except loops); constants in UPPER_SNAKE_CASE.

5) Validations (Quality Gates)
- Frontend: yarn lint (no warnings), yarn build (no warnings).
- Backend: yarn lint (no warnings), yarn test or yarn test:cov for impacted modules.
- TypeScript: tsc --noEmit when applicable; never introduce any/unknown.

6) Logging and Errors
- No console.log in committed code; use project logger.
- Fail fast; throw early with custom domain errors; translate user-facing messages in FR; log in EN with error codes.

7) Security
- Never log or commit secrets/keys.
- Follow RBAC and authentication patterns already present.
- Respect workspace permissions set in `.claude/settings.local.json`.

8) Communication Cadence
- Micro-updates before tool batches and after significant steps.
- Keep messages concise and skimmable; include only relevant fenced snippets.

9) Summary and Commit Proposal
- Provide a brief summary of impacts (files, behaviors, constraints).
- Propose an English commit message; if no ESLint/TS errors are found, ask the user for validation before proceeding.

References:
- Zero Warnings, DDD Testing, Refactoring rules in `07-quality-assurance/`.
- TypeScript strictness and naming rules in `02-programming-languages/`.

